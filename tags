!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
Building	building.cpp	/^Building::Building(Point center){$/;"	f	class:Building
Building	building.h	/^class Building{$/;"	c
CAMERA_ANGLE_HORIZONTAL	globals.h	/^	double CAMERA_ANGLE_HORIZONTAL;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:double
CAMERA_ANGLE_VERTICAL	globals.h	/^	double CAMERA_ANGLE_VERTICAL;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:double
CAMERA_LOOK_VECTOR	globals.h	/^	} CAMERA_LOOK_VECTOR;$/;"	m	class:GLOBAL_SETTINGS	typeref:struct:GLOBAL_SETTINGS::__anonc826279f0208
CAMERA_POS	globals.h	/^	} CAMERA_POS;$/;"	m	class:GLOBAL_SETTINGS	typeref:struct:GLOBAL_SETTINGS::__anonc826279f0108
FPS_CameraMovement	globals.cpp	/^void FPS_CameraMovement(int x,int y){$/;"	f	typeref:typename:void
GLOBAL	globals.cpp	/^GLOBAL_SETTINGS GLOBAL;$/;"	v	typeref:typename:GLOBAL_SETTINGS
GLOBAL_SETTINGS	globals.cpp	/^GLOBAL_SETTINGS::GLOBAL_SETTINGS(){$/;"	f	class:GLOBAL_SETTINGS
GLOBAL_SETTINGS	globals.h	/^class GLOBAL_SETTINGS{$/;"	c
GLOP_BUILDING	building.h	/^#define GLOP_BUILDING$/;"	d
GLOP_GLOBALS	globals.h	/^#define GLOP_GLOBALS$/;"	d
LIGHTS	globals.h	/^	std::vector<LIGHT_STRUCT> LIGHTS;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:std::vector<LIGHT_STRUCT>
LIGHT_STRUCT	globals.h	/^struct LIGHT_STRUCT{$/;"	s
LineSeg	vector_basics.cpp	/^LineSeg::LineSeg(){$/;"	f	class:LineSeg
LineSeg	vector_basics.cpp	/^LineSeg::LineSeg(Point p1, const Vector& v){$/;"	f	class:LineSeg
LineSeg	vector_basics.cpp	/^LineSeg::LineSeg(const Point& p1, const Point& p2){$/;"	f	class:LineSeg
LineSeg	vector_basics.h	/^class LineSeg{$/;"	c
MODEL_TRIANGLES	globals.h	/^struct MODEL_TRIANGLES{$/;"	s
PI	globals.h	/^#define PI /;"	d
PI	vector_basics.h	/^#define PI /;"	d
PROJECTILE	projectile.h	/^#define PROJECTILE$/;"	d
Point	vector_basics.cpp	/^Point::Point(){$/;"	f	class:Point
Point	vector_basics.cpp	/^Point::Point(double x, double y, double z){$/;"	f	class:Point
Point	vector_basics.h	/^class Point{$/;"	c
Polygon3d	polygon3d.cpp	/^Polygon3d::Polygon3d(){$/;"	f	class:Polygon3d
Polygon3d	polygon3d.cpp	/^Polygon3d::Polygon3d(Triangle &tri){$/;"	f	class:Polygon3d
Polygon3d	polygon3d.cpp	/^Polygon3d::Polygon3d(const Polygon3d& other){$/;"	f	class:Polygon3d
Polygon3d	polygon3d.cpp	/^Polygon3d::Polygon3d(double x,double y,double z){$/;"	f	class:Polygon3d
Polygon3d	polygon3d.cpp	/^Polygon3d::Polygon3d(std::vector<Point>& points){$/;"	f	class:Polygon3d
Polygon3d	polygon3d.h	/^class Polygon3d{$/;"	c
Projectile	projectile.cpp	/^Projectile::Projectile(Point center){$/;"	f	class:Projectile
Projectile	projectile.h	/^class Projectile{$/;"	c
TANK	tank.h	/^#define TANK$/;"	d
TARGET	target.h	/^#define TARGET$/;"	d
TEXTURES_LOADED	globals.h	/^	std::unordered_map<std::string,TextureInfo> TEXTURES_LOADED; \/\/ allows for easily shared text/;"	m	class:GLOBAL_SETTINGS	typeref:typename:std::unordered_map<std::string,TextureInfo>
Tank	tank.cpp	/^Tank::Tank(Point center){$/;"	f	class:Tank
Tank	tank.h	/^class Tank{$/;"	c
Target	target.cpp	/^Target::Target(Point center)$/;"	f	class:Target
Target	target.h	/^class Target{$/;"	c
TextureInfo	globals.h	/^struct TextureInfo{$/;"	s
Triangle	vector_basics.h	/^struct Triangle{$/;"	s
VECTOR_BASICS	vector_basics.h	/^#define VECTOR_BASICS$/;"	d
Vector	vector_basics.cpp	/^Vector::Vector(){$/;"	f	class:Vector
Vector	vector_basics.cpp	/^Vector::Vector(Point& p1, Point& p2){ \/\/ p1 is the starting point and p2 is where we are going$/;"	f	class:Vector
Vector	vector_basics.cpp	/^Vector::Vector(double x, double y, double z){$/;"	f	class:Vector
Vector	vector_basics.h	/^class Vector{$/;"	c
WINDOW_MAX_X	globals.h	/^	int WINDOW_MAX_X;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:int
WINDOW_MAX_Y	globals.h	/^	int WINDOW_MAX_Y;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:int
WORLD_COORDINATE_MAX_X	globals.h	/^	double WORLD_COORDINATE_MAX_X;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:double
WORLD_COORDINATE_MAX_Y	globals.h	/^	double WORLD_COORDINATE_MAX_Y;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:double
WORLD_COORDINATE_MIN_X	globals.h	/^	double WORLD_COORDINATE_MIN_X;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:double
WORLD_COORDINATE_MIN_Y	globals.h	/^	double WORLD_COORDINATE_MIN_Y;$/;"	m	class:GLOBAL_SETTINGS	typeref:typename:double
__anona66eb382010a	vector_basics.h	/^	union{ \/\/ make it so we can access the data as array or xyz$/;"	u	class:Point
__anona66eb3820208	vector_basics.h	/^		struct{$/;"	s	union:Point::__anona66eb382010a
__anona66eb382030a	vector_basics.h	/^	union{ \/\/ make it so we can access the data as array or xyz$/;"	u	class:Vector
__anona66eb3820408	vector_basics.h	/^		struct{$/;"	s	union:Vector::__anona66eb382030a
__anonc826279f0108	globals.h	/^	struct {$/;"	s	class:GLOBAL_SETTINGS
__anonc826279f0208	globals.h	/^	struct {$/;"	s	class:GLOBAL_SETTINGS
__secretVertexDrawingFunction	polygon3d.cpp	/^void Polygon3d::__secretVertexDrawingFunction(void *data, void *polygon){$/;"	f	class:Polygon3d	typeref:typename:void
attenuation_linear	globals.h	/^	double attenuation_linear;$/;"	m	struct:LIGHT_STRUCT	typeref:typename:double
attenuation_quadratic	globals.h	/^	double attenuation_quadratic;$/;"	m	struct:LIGHT_STRUCT	typeref:typename:double
base	tank.h	/^	std::vector<Polygon3d> base, tower, cannon;$/;"	m	class:Tank	typeref:typename:std::vector<Polygon3d>
baseAngle	tank.h	/^	double baseAngle, towerAngle, cannonAngle, scale;$/;"	m	class:Tank	typeref:typename:double
boundingBox	building.cpp	/^std::vector<Polygon3d> Building::boundingBox(){$/;"	f	class:Building	typeref:typename:std::vector<Polygon3d>
boundingBox	projectile.h	/^	std::vector<Polygon3d> boundingBox;$/;"	m	class:Projectile	typeref:typename:std::vector<Polygon3d>
boundingBox	tank.cpp	/^std::vector<Polygon3d> Tank::boundingBox(){$/;"	f	class:Tank	typeref:typename:std::vector<Polygon3d>
boundingBox	target.h	/^	std::vector<Polygon3d> boundingBox;$/;"	m	class:Target	typeref:typename:std::vector<Polygon3d>
box	building.h	/^	std::vector<Polygon3d> box;$/;"	m	class:Building	typeref:typename:std::vector<Polygon3d>
buildings	main.cpp	/^std::vector<Building*> buildings; \/\/ must be a pointer so that we dont try to allocated GL thi/;"	v	typeref:typename:std::vector<Building * >
camMove_forward	main.cpp	/^double camMove_forward = 0;$/;"	v	typeref:typename:double
camMove_speed	main.cpp	/^const double camMove_speed = 0.25 \/ 2.0;$/;"	v	typeref:typename:const double
camMove_strafe	main.cpp	/^double camMove_strafe = 0;$/;"	v	typeref:typename:double
camMove_vert	main.cpp	/^double camMove_vert = 0;$/;"	v	typeref:typename:double
cannon	tank.h	/^	std::vector<Polygon3d> base, tower, cannon;$/;"	m	class:Tank	typeref:typename:std::vector<Polygon3d>
cannonAngle	tank.h	/^	double baseAngle, towerAngle, cannonAngle, scale;$/;"	m	class:Tank	typeref:typename:double
center	building.h	/^	Point center;$/;"	m	class:Building	typeref:typename:Point
center	polygon3d.h	/^	Point center;$/;"	m	class:Polygon3d	typeref:typename:Point
center	projectile.h	/^	Point center;$/;"	m	class:Projectile	typeref:typename:Point
center	tank.h	/^	Point center;$/;"	m	class:Tank	typeref:typename:Point
center	target.h	/^	Point center;$/;"	m	class:Target	typeref:typename:Point
color	globals.h	/^	double color[3];$/;"	m	struct:LIGHT_STRUCT	typeref:typename:double[3]
color	polygon3d.h	/^	GLubyte color[4]; \/\/RGBA - 1 byte a piece$/;"	m	class:Polygon3d	typeref:typename:GLubyte[4]
cross	vector_basics.cpp	/^Vector Vector::cross(const Vector& other){$/;"	f	class:Vector	typeref:typename:Vector
crossProduct	vector_basics.cpp	/^Vector Vector::crossProduct(Vector& other){$/;"	f	class:Vector	typeref:typename:Vector
data	vector_basics.h	/^		double data[3];$/;"	m	union:Point::__anona66eb382010a	typeref:typename:double[3]
data	vector_basics.h	/^		double data[3];$/;"	m	union:Vector::__anona66eb382030a	typeref:typename:double[3]
direction	vector_basics.cpp	/^Vector LineSeg::direction(){$/;"	f	class:LineSeg	typeref:typename:Vector
display	main.cpp	/^void display(){$/;"	f	typeref:typename:void
distanceBetweenBuildings	building.h	/^	static constexpr double distanceBetweenBuildings = 60;$/;"	m	class:Building	typeref:typename:constexpr double
dot	vector_basics.cpp	/^double Vector::dot(Vector& other){$/;"	f	class:Vector	typeref:typename:double
dotProduct	vector_basics.cpp	/^double Vector::dotProduct(Vector& other){$/;"	f	class:Vector	typeref:typename:double
draw	building.cpp	/^void Building::draw(){$/;"	f	class:Building	typeref:typename:void
draw	polygon3d.cpp	/^void Polygon3d::draw(){$/;"	f	class:Polygon3d	typeref:typename:void
draw	projectile.cpp	/^void Projectile::draw(){$/;"	f	class:Projectile	typeref:typename:void
draw	tank.cpp	/^void Tank::draw(){$/;"	f	class:Tank	typeref:typename:void
draw	target.cpp	/^void Target::draw()$/;"	f	class:Target	typeref:typename:void
drawTesselate	polygon3d.h	/^	bool drawTesselate;$/;"	m	class:Polygon3d	typeref:typename:bool
gameEngine	main.cpp	/^void gameEngine(){$/;"	f	typeref:typename:void
getBoundingBox	projectile.cpp	/^std::vector<Polygon3d> Projectile::getBoundingBox(){$/;"	f	class:Projectile	typeref:typename:std::vector<Polygon3d>
getBoundingBox	target.cpp	/^std::vector<Polygon3d> Target::getBoundingBox()$/;"	f	class:Target	typeref:typename:std::vector<Polygon3d>
getCenter	polygon3d.cpp	/^Point Polygon3d::getCenter(){$/;"	f	class:Polygon3d	typeref:typename:Point
getColor	polygon3d.cpp	/^GLubyte Polygon3d::getColor(int channel){$/;"	f	class:Polygon3d	typeref:typename:GLubyte
getMaxRadius	polygon3d.cpp	/^double Polygon3d::getMaxRadius(){$/;"	f	class:Polygon3d	typeref:typename:double
getPoints	polygon3d.cpp	/^std::vector<Point>& Polygon3d::getPoints(){$/;"	f	class:Polygon3d	typeref:typename:std::vector<Point> &
getRotation	polygon3d.cpp	/^Vector Polygon3d::getRotation(){$/;"	f	class:Polygon3d	typeref:typename:Vector
getRotationSpeed	polygon3d.cpp	/^Vector Polygon3d::getRotationSpeed(){$/;"	f	class:Polygon3d	typeref:typename:Vector
getScale	polygon3d.cpp	/^double Polygon3d::getScale(){$/;"	f	class:Polygon3d	typeref:typename:double
getTesselation	polygon3d.cpp	/^bool Polygon3d::getTesselation(){$/;"	f	class:Polygon3d	typeref:typename:bool
getTexture	polygon3d.cpp	/^GLuint Polygon3d::getTexture(){$/;"	f	class:Polygon3d	typeref:typename:GLuint
getTexturePoints	polygon3d.cpp	/^std::vector<Point>& Polygon3d::getTexturePoints(){$/;"	f	class:Polygon3d	typeref:typename:std::vector<Point> &
getTexturePos	polygon3d.cpp	/^Point& Polygon3d::getTexturePos(int index){$/;"	f	class:Polygon3d	typeref:typename:Point &
getTransform	polygon3d.cpp	/^Polygon3d Polygon3d::getTransform(){} \/\/ get the transform of the points of the polygon to whe/;"	f	class:Polygon3d	typeref:typename:Polygon3d
getVelocity	polygon3d.cpp	/^Vector Polygon3d::getVelocity(){$/;"	f	class:Polygon3d	typeref:typename:Vector
glop102_polygon3d	polygon3d.h	/^#define glop102_polygon3d$/;"	d
hasTex	polygon3d.h	/^	bool hasTex;$/;"	m	class:Polygon3d	typeref:typename:bool
hasTexture	globals.h	/^	bool hasTexture;$/;"	m	struct:MODEL_TRIANGLES	typeref:typename:bool
hasTexture	polygon3d.cpp	/^bool Polygon3d::hasTexture(){$/;"	f	class:Polygon3d	typeref:typename:bool
height	globals.h	/^	unsigned long width,height;$/;"	m	struct:TextureInfo	typeref:typename:unsigned long
intersect	vector_basics.cpp	/^bool LineSeg::intersect(LineSeg& l2){$/;"	f	class:LineSeg	typeref:typename:bool
intersection	vector_basics.cpp	/^Point LineSeg::intersection(LineSeg& l2){$/;"	f	class:LineSeg	typeref:typename:Point
keyboardButtons	main.cpp	/^void keyboardButtons(unsigned char key, int x, int y){$/;"	f	typeref:typename:void
keyboardButtonsUp	main.cpp	/^void keyboardButtonsUp(unsigned char key, int x, int y){$/;"	f	typeref:typename:void
keyboardButtonsUp_special	main.cpp	/^void keyboardButtonsUp_special(int key,int x,int y){$/;"	f	typeref:typename:void
keyboardButtons_special	main.cpp	/^void keyboardButtons_special(int key,int x,int y){$/;"	f	typeref:typename:void
laser	tank.h	/^	bool laser;$/;"	m	class:Tank	typeref:typename:bool
laserOn	main.cpp	/^bool laserOn = true;$/;"	v	typeref:typename:bool
length	vector_basics.cpp	/^double Vector::length(){$/;"	f	class:Vector	typeref:typename:double
loadTex	globals.cpp	/^void loadTex(std::string name){$/;"	f	typeref:typename:void
magnitude	vector_basics.cpp	/^double Vector::magnitude(){$/;"	f	class:Vector	typeref:typename:double
main	main.cpp	/^int main(int argc,char** args){$/;"	f	typeref:typename:int
maxRadius	polygon3d.h	/^	double maxRadius; \/\/ special little optimization for collision checking$/;"	m	class:Polygon3d	typeref:typename:double
model	building.h	/^	std::vector<Polygon3d> model;$/;"	m	class:Building	typeref:typename:std::vector<Polygon3d>
mouseButtons	main.cpp	/^void mouseButtons(int but,int state,int x,int y){$/;"	f	typeref:typename:void
mouseMovement	main.cpp	/^void mouseMovement(int x,int y){$/;"	f	typeref:typename:void
name	globals.h	/^	std::string name;$/;"	m	struct:TextureInfo	typeref:typename:std::string
numPoints	polygon3d.cpp	/^int Polygon3d::numPoints()const{$/;"	f	class:Polygon3d	typeref:typename:int
operator !=	vector_basics.cpp	/^bool Point::operator!=(const Point& other){$/;"	f	class:Point	typeref:typename:bool
operator !=	vector_basics.cpp	/^bool Vector::operator!=(const Vector& other){$/;"	f	class:Vector	typeref:typename:bool
operator *	vector_basics.cpp	/^Point Point::operator*(const double scale){$/;"	f	class:Point	typeref:typename:Point
operator *	vector_basics.cpp	/^Vector Vector::operator*(const double scale){$/;"	f	class:Vector	typeref:typename:Vector
operator *=	vector_basics.cpp	/^Point& Point::operator*=(const double scale){$/;"	f	class:Point	typeref:typename:Point &
operator *=	vector_basics.cpp	/^Vector& Vector::operator*=(const double scale){$/;"	f	class:Vector	typeref:typename:Vector &
operator +	vector_basics.cpp	/^Point Point::operator+(const Point& other){$/;"	f	class:Point	typeref:typename:Point
operator +	vector_basics.cpp	/^Point Point::operator+(const Vector& other){$/;"	f	class:Point	typeref:typename:Point
operator +	vector_basics.cpp	/^Vector Vector::operator+(const Vector& other){$/;"	f	class:Vector	typeref:typename:Vector
operator +=	vector_basics.cpp	/^Point& Point::operator+=(const Point& other){$/;"	f	class:Point	typeref:typename:Point &
operator +=	vector_basics.cpp	/^Point& Point::operator+=(const Vector& other){$/;"	f	class:Point	typeref:typename:Point &
operator +=	vector_basics.cpp	/^Vector& Vector::operator+=(const Vector& other){$/;"	f	class:Vector	typeref:typename:Vector &
operator -	vector_basics.cpp	/^Vector Vector::operator-(const Vector& other){$/;"	f	class:Vector	typeref:typename:Vector
operator -=	vector_basics.cpp	/^Vector& Vector::operator-=(const Vector& other){$/;"	f	class:Vector	typeref:typename:Vector &
operator /	vector_basics.cpp	/^Point Point::operator\/(const double scale){$/;"	f	class:Point	typeref:typename:Point
operator /	vector_basics.cpp	/^Vector Vector::operator\/(const double scale){$/;"	f	class:Vector	typeref:typename:Vector
operator /=	vector_basics.cpp	/^Point& Point::operator\/=(const double scale){$/;"	f	class:Point	typeref:typename:Point &
operator /=	vector_basics.cpp	/^Vector& Vector::operator\/=(const double scale){$/;"	f	class:Vector	typeref:typename:Vector &
operator =	polygon3d.cpp	/^Polygon3d& Polygon3d::operator=(Polygon3d other){$/;"	f	class:Polygon3d	typeref:typename:Polygon3d &
operator ==	vector_basics.cpp	/^bool Point::operator==(const Point& other){$/;"	f	class:Point	typeref:typename:bool
operator ==	vector_basics.cpp	/^bool Vector::operator==(const Vector& other){$/;"	f	class:Vector	typeref:typename:bool
operator []	polygon3d.cpp	/^Point& Polygon3d::operator[](int x){$/;"	f	class:Polygon3d	typeref:typename:Point &
operator []	vector_basics.cpp	/^Point& LineSeg::operator[](const int& index){$/;"	f	class:LineSeg	typeref:typename:Point &
operator []	vector_basics.cpp	/^double& Point::operator[](const int index){$/;"	f	class:Point	typeref:typename:double &
operator []	vector_basics.cpp	/^double& Vector::operator[](const int index){$/;"	f	class:Vector	typeref:typename:double &
p1	globals.h	/^	double p1[3];$/;"	m	struct:MODEL_TRIANGLES	typeref:typename:double[3]
p1	vector_basics.h	/^	Point p1,p2,p3;$/;"	m	struct:Triangle	typeref:typename:Point
p1	vector_basics.h	/^	Point p1;$/;"	m	class:LineSeg	typeref:typename:Point
p2	globals.h	/^	double p2[3];$/;"	m	struct:MODEL_TRIANGLES	typeref:typename:double[3]
p2	vector_basics.h	/^	Point p1,p2,p3;$/;"	m	struct:Triangle	typeref:typename:Point
p2	vector_basics.h	/^	Point p2;$/;"	m	class:LineSeg	typeref:typename:Point
p3	globals.h	/^	double p3[3];$/;"	m	struct:MODEL_TRIANGLES	typeref:typename:double[3]
p3	vector_basics.h	/^	Point p1,p2,p3;$/;"	m	struct:Triangle	typeref:typename:Point
passiveMouseMovement	main.cpp	/^void passiveMouseMovement(int x,int y){$/;"	f	typeref:typename:void
possition	globals.h	/^	double possition[3];$/;"	m	struct:LIGHT_STRUCT	typeref:typename:double[3]
recenter	polygon3d.cpp	/^void Polygon3d::recenter(){} \/\/ moves the center of the polygon to be at the centroid of the s/;"	f	class:Polygon3d	typeref:typename:void
removeTexture	polygon3d.cpp	/^void Polygon3d::removeTexture(){$/;"	f	class:Polygon3d	typeref:typename:void
rotation	polygon3d.h	/^	Vector rotation;$/;"	m	class:Polygon3d	typeref:typename:Vector
rotationSpeed	polygon3d.h	/^	Vector rotationSpeed;$/;"	m	class:Polygon3d	typeref:typename:Vector
scale	polygon3d.h	/^	double scale;$/;"	m	class:Polygon3d	typeref:typename:double
scale	tank.h	/^	double baseAngle, towerAngle, cannonAngle, scale;$/;"	m	class:Tank	typeref:typename:double
scaleMouse	globals.cpp	/^void scaleMouse(int &x, int &y){$/;"	f	typeref:typename:void
setCenter	polygon3d.cpp	/^void Polygon3d::setCenter(Point pp){$/;"	f	class:Polygon3d	typeref:typename:void
setColor	polygon3d.cpp	/^void Polygon3d::setColor(GLubyte red,GLubyte green, GLubyte blue){$/;"	f	class:Polygon3d	typeref:typename:void
setColor	polygon3d.cpp	/^void Polygon3d::setColor(GLubyte red,GLubyte green, GLubyte blue, GLubyte alpha){$/;"	f	class:Polygon3d	typeref:typename:void
setRotation	polygon3d.cpp	/^void Polygon3d::setRotation(Vector& rot){$/;"	f	class:Polygon3d	typeref:typename:void
setRotationSpeed	polygon3d.cpp	/^void Polygon3d::setRotationSpeed(Vector& rot){$/;"	f	class:Polygon3d	typeref:typename:void
setScale	polygon3d.cpp	/^void Polygon3d::setScale(double sc){$/;"	f	class:Polygon3d	typeref:typename:void
setTesselation	polygon3d.cpp	/^void Polygon3d::setTesselation(bool tes){$/;"	f	class:Polygon3d	typeref:typename:void
setTexture	polygon3d.cpp	/^void Polygon3d::setTexture(GLuint tex){$/;"	f	class:Polygon3d	typeref:typename:void
setVelocity	polygon3d.cpp	/^void Polygon3d::setVelocity(Vector& x){$/;"	f	class:Polygon3d	typeref:typename:void
setVelocity	polygon3d.cpp	/^void Polygon3d::setVelocity(double x, double y, double z){$/;"	f	class:Polygon3d	typeref:typename:void
shoot	tank.cpp	/^void Tank::shoot() {}/;"	f	class:Tank	typeref:typename:void
tank	main.cpp	/^Tank * tank;$/;"	v	typeref:typename:Tank *
tankBaseRotate	main.cpp	/^double tankBaseRotate = 0;$/;"	v	typeref:typename:double
tankCannonRotate	main.cpp	/^double tankCannonRotate = 0;$/;"	v	typeref:typename:double
tankScale	main.cpp	/^double tankScale = 0;$/;"	v	typeref:typename:double
tankSpeed	main.cpp	/^double tankSpeed = 0;$/;"	v	typeref:typename:double
tankTowerRotate	main.cpp	/^double tankTowerRotate = 0;$/;"	v	typeref:typename:double
targets	main.cpp	/^std::vector<Target*> targets;$/;"	v	typeref:typename:std::vector<Target * >
texture	globals.h	/^	GLuint texture;$/;"	m	struct:MODEL_TRIANGLES	typeref:typename:GLuint
texture	polygon3d.h	/^	GLuint texture;$/;"	m	class:Polygon3d	typeref:typename:GLuint
texturePoints	globals.h	/^	double texturePoints[3]; \/\/ at each vertex, what part of the texture is dispalyed$/;"	m	struct:MODEL_TRIANGLES	typeref:typename:double[3]
textureRef	globals.h	/^	GLuint textureRef;$/;"	m	struct:TextureInfo	typeref:typename:GLuint
tower	tank.h	/^	std::vector<Polygon3d> base, tower, cannon;$/;"	m	class:Tank	typeref:typename:std::vector<Polygon3d>
towerAngle	tank.h	/^	double baseAngle, towerAngle, cannonAngle, scale;$/;"	m	class:Tank	typeref:typename:double
update	building.cpp	/^void Building::update(){$/;"	f	class:Building	typeref:typename:void
update	polygon3d.cpp	/^void Polygon3d::update(){$/;"	f	class:Polygon3d	typeref:typename:void
update	projectile.cpp	/^void Projectile::update()$/;"	f	class:Projectile	typeref:typename:void
update	tank.cpp	/^void Tank::update(){$/;"	f	class:Tank	typeref:typename:void
update	target.cpp	/^void Target::update()$/;"	f	class:Target	typeref:typename:void
velocity	polygon3d.h	/^	Vector velocity;$/;"	m	class:Polygon3d	typeref:typename:Vector
vertexList	polygon3d.h	/^	std::vector<Point> vertexList;$/;"	m	class:Polygon3d	typeref:typename:std::vector<Point>
vertexTextureList	polygon3d.h	/^	std::vector<Point> vertexTextureList;$/;"	m	class:Polygon3d	typeref:typename:std::vector<Point>
width	globals.h	/^	unsigned long width,height;$/;"	m	struct:TextureInfo	typeref:typename:unsigned long
windowResize	globals.cpp	/^void windowResize(int width, int height){$/;"	f	typeref:typename:void
x	globals.h	/^		double x;$/;"	m	struct:GLOBAL_SETTINGS::__anonc826279f0108	typeref:typename:double
x	globals.h	/^		double x;$/;"	m	struct:GLOBAL_SETTINGS::__anonc826279f0208	typeref:typename:double
x	vector_basics.h	/^			double x,y,z;$/;"	m	struct:Point::__anona66eb382010a::__anona66eb3820208	typeref:typename:double
x	vector_basics.h	/^			double x,y,z;$/;"	m	struct:Vector::__anona66eb382030a::__anona66eb3820408	typeref:typename:double
y	globals.h	/^		double y;$/;"	m	struct:GLOBAL_SETTINGS::__anonc826279f0108	typeref:typename:double
y	globals.h	/^		double y;$/;"	m	struct:GLOBAL_SETTINGS::__anonc826279f0208	typeref:typename:double
y	vector_basics.h	/^			double x,y,z;$/;"	m	struct:Point::__anona66eb382010a::__anona66eb3820208	typeref:typename:double
y	vector_basics.h	/^			double x,y,z;$/;"	m	struct:Vector::__anona66eb382030a::__anona66eb3820408	typeref:typename:double
z	globals.h	/^		double z;$/;"	m	struct:GLOBAL_SETTINGS::__anonc826279f0108	typeref:typename:double
z	globals.h	/^		double z;$/;"	m	struct:GLOBAL_SETTINGS::__anonc826279f0208	typeref:typename:double
z	vector_basics.h	/^			double x,y,z;$/;"	m	struct:Point::__anona66eb382010a::__anona66eb3820208	typeref:typename:double
z	vector_basics.h	/^			double x,y,z;$/;"	m	struct:Vector::__anona66eb382030a::__anona66eb3820408	typeref:typename:double
